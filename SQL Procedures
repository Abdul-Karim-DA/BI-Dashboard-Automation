USE AKBANKING;

select* from AKBANKING.PUBLIC.TRANSACTIONS;

CREATE OR REPLACE TABLE ACC_LATEST_TRNX_WITH_BALANCE
AS
SELECT LTD.*, TXN.BALANCE
FROM AKBANKING.PUBLIC.TRANSACTIONS AS TXN
INNER JOIN 
(
SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
MONTH(DATE) AS TXN_MONTH,
MAX(DATE) AS LATEST_TXN_DATE
FROM AKBANKING.PUBLIC.TRANSACTIONS
GROUP BY 1,2,3
ORDER BY 1,2,3
)
AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit'
ORDER BY LTD.ACCOUNT_ID,LTD.TXN_YEAR,LATEST_TXN_DATE;

SELECT * FROM ACC_LATEST_TRNX_WITH_BALANCE;

CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT ALMB.TXN_YEAR, ALMB.TXN_MONTH, T.BANK, A.ACCOUNT_TYPE,

COUNT(DISTINCT ALMB.ACCOUNT_ID) AS TOT_ACCOUNT,
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALMB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2) AS DEPOSIT_PERC,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC,
NVL(TOT_ACCOUNT/TOT_BALANCE,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM AKBANKING.PUBLIC.TRANSACTIONS AS T
INNER JOIN ACC_LATEST_TRNX_WITH_BALANCE AS ALMB ON T.ACCOUNT_ID = ALMB.ACCOUNT_ID
LEFT OUTER JOIN ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;


drop table acc_latest_trnx_with_balance;
drop table banking_kpi;

CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_ACC_LATEST()
RETURNS STRING
LANGUAGE SQL
AS 
$$
CREATE OR REPLACE TABLE ACC_LATEST_TRNX_WITH_BALANCE
AS
SELECT LTD.*, TXN.BALANCE
FROM AKBANKING.PUBLIC.TRANSACTIONS AS TXN
INNER JOIN 
(
SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
MONTH(DATE) AS TXN_MONTH,
MAX(DATE) AS LATEST_TXN_DATE
FROM AKBANKING.PUBLIC.TRANSACTIONS
GROUP BY 1,2,3
ORDER BY 1,2,3
)
AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit'
ORDER BY LTD.ACCOUNT_ID,LTD.TXN_YEAR,LATEST_TXN_DATE;
$$;

SHOW PROCEDURES;

create or replace procedure create_or_replace_banking_kpi()
returns string 
language SQL
as 
$$
CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT ALMB.TXN_YEAR, ALMB.TXN_MONTH, T.BANK, A.ACCOUNT_TYPE,

COUNT(DISTINCT ALMB.ACCOUNT_ID) AS TOT_ACCOUNT,
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALMB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2) AS DEPOSIT_PERC,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC,
NVL(TOT_ACCOUNT/TOT_BALANCE,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM AKBANKING.PUBLIC.TRANSACTIONS AS T
INNER JOIN ACC_LATEST_TRNX_WITH_BALANCE AS ALMB ON T.ACCOUNT_ID = ALMB.ACCOUNT_ID
LEFT OUTER JOIN ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;
$$;

call CREATE_OR_REPLACE_ACC_LATEST();
call create_or_replace_banking_kpi();

CREATE OR REPLACE task ACC_LATEST_TRNX
WAREHOUSE = Banking
SCHEDULE = "1 MINUTE"
AS call CREATE_OR_REPLACE_ACC_LATEST();

create or replace task BANKING_KPI
WAREHOUSE = Banking
SCHEDULE = "3 MINUTE"
AS call create_or_replace_banking_kpi();

SHOW TASKS;

ALTER TASK ACC_LATEST_TRNX RESUME;
ALTER TASK ACC_LATEST_TRNX SUSPEND;
ALTER TASK BANKING_KPI RESUME;
ALTER TASK BANKING_KPI SUSPEND;

select * from ACC_LATEST_TRNX_WITH_BALANCE;
select * from BANKING_KPI;

use warehouse banking;


